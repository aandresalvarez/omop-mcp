[project]
name = "omop-mcp"
version = "0.1.0"
description = "OMOP MCP server with PydanticAI agents for concept discovery and SQL generation"
authors = [
    {name = "Alvaro Alvarez", email = "alvaro@example.com"}
]
readme = "README.md"
requires-python = ">=3.11"
license = {text = "MIT"}

dependencies = [
    # Core MCP
    "mcp>=1.2.0",

    # PydanticAI & Models
    "pydantic>=2.7",
    "pydantic-ai>=1.1.0",
    "pydantic-settings>=2.2",

    # ATHENA API Client (REQUIRED EXACT VERSION)
    "athena-client==1.0.27",

    # OpenAI for PydanticAI agents
    "openai>=1.50.0",

    # HTTP & Async
    "httpx>=0.27",

    # SQL Dialect Translation
    "sqlglot>=25.0.0",

    # DuckDB (included in core for local development)
    "duckdb>=1.1.0",

    # Logging & Utilities
    "structlog>=24.1",
    "python-dotenv>=1.0",
    "tenacity>=9.0",

    # OAuth 2.1 / JWT
    "pyjwt[crypto]>=2.9.0",

    # FastMCP
    "starlette>=0.40",
    "uvicorn>=0.30",
]

[project.optional-dependencies]
dev = [
    # Testing
    "pytest>=8.0",
    "pytest-asyncio>=0.23",
    "pytest-cov>=5.0",
    "pytest-mock>=3.12",
    "hypothesis>=6.0",  # Property-based testing
    "faker>=24.0",  # Test data generation

    # Formatting & Linting
    "black>=24.0",
    "ruff>=0.6",
    "pylint>=3.0",

    # Type Checking
    "mypy>=1.10",
    "pyright>=1.1.350",

    # Security Scanning
    "bandit[toml]>=1.7",  # Python security linter
    "pip-audit>=2.7",  # PyPI vulnerability scanner
    "safety>=3.0",  # Dependency vulnerability scanner

    # SQL Quality (for OMOP/healthcare data)
    "sqlfluff>=3.0",  # SQL linter and formatter

    # Development
    "ipython>=8.0",
    "types-aiofiles",
]

# Backend-specific extras
bigquery = [
    "google-cloud-bigquery>=3.25.0",
]

snowflake = [
    "snowflake-connector-python>=3.12.0",
]

postgres = [
    "psycopg[binary,pool]>=3.2",
    "asyncpg>=0.29",
]

# Convenience groups
local = [
    "omop-mcp[duckdb]",
]

cloud = [
    "omop-mcp[bigquery,snowflake]",
]

all-backends = [
    "omop-mcp[bigquery,snowflake,postgres]",
]

observability = [
    # Production observability
    "prometheus-client>=0.20",  # Metrics export
    "opentelemetry-api>=1.24",  # Optional: distributed tracing
    "opentelemetry-sdk>=1.24",
]

[build-system]
requires = ["hatchling"]
build-backend = "hatchling.build"

[project.scripts]
omop-mcp = "omop_mcp.server:main"

[tool.pytest.ini_options]
asyncio_mode = "auto"
testpaths = ["tests"]
python_files = "test_*.py"
python_classes = "Test*"
python_functions = "test_*"

[tool.black]
line-length = 100
target-version = ["py311"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.mypy_cache
  | \.venv
  | __pycache__
)/
'''

[tool.ruff]
line-length = 100
target-version = "py311"

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "N",   # pep8-naming
    "UP",  # pyupgrade
    "B",   # flake8-bugbear
]
ignore = [
    "E501",  # line too long (black handles this)
    "N805",  # first argument should be named 'self' (doesn't apply to Pydantic validators)
]

[tool.mypy]
python_version = "3.11"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = false  # Gradual typing

[tool.bandit]
exclude_dirs = ["tests", ".venv", "htmlcov"]
skips = [
    "B101",  # assert_used - we use asserts in tests
    "B601",  # paramiko_calls - not applicable
]

[tool.coverage.run]
source = ["src/omop_mcp"]
omit = [
    "*/tests/*",
    "*/__pycache__/*",
    "*/site-packages/*",
]
branch = true

[tool.coverage.report]
precision = 2
show_missing = true
skip_covered = false
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
    "@(abc\\.)?abstractmethod",
]

[tool.coverage.html]
directory = "htmlcov"

[tool.sqlfluff.core]
dialect = "bigquery"
exclude_rules = ["L016"]  # Line too long (we handle with black)
max_line_length = 100

[tool.sqlfluff.indentation]
indented_joins = true
template_blocks_indent = true
